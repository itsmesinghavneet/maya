# See docs/examples
# http://doc.gitlab.com/ce/ci/quick_start/README.html
# http://doc.gitlab.com/ce/ci/yaml/README.html

# GitLab CI template for Go tests. Note this installs
# a new working copy of Go in a non-standard path such
# that sudo/root is not needed for the install stage.

# note that this particular install-environment stage
# is overly verbose in order to debug anything tricky
# or weird in your environment - feel free to trim it 
# down as needed

stages:
  - install-environment
  - build
  - test

install-go:
  stage: install-environment
  script:
    - apt-get update
    - apt-get install sudo
    - apt-get -qq -y install curl
    - export CURRENT_BUILD_PATH=$(pwd)
    - echo $PATH
    - rm -rf $HOME/golang
    - rm -rf $HOME/gopath
    - mkdir -p $HOME/golang # for GOROOT (contains the Go binary & core packages)
    - mkdir -p $HOME/gopath # for GOPATH (contains code and external packages)
    - curl http://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz > go1.9.1.linux-amd64.tar.gz
    - tar -C $HOME/golang -xzf go1.9.1.linux-amd64.tar.gz
    - export GOROOT=$HOME/golang/go
    - export GOPATH=$HOME/gopath
    - export PATH=$PATH:$GOROOT/bin
    - export PATH=$PATH:$GOPATH/bin
    - (if [[ "$(go version)" == *"go version go1.9"* ]]; then echo "âœ“ Go binary installed!"; else echo "Go binary not installed"; exit -1; fi);
    - go version
    - echo $PATH
    - go env
    - which go


build-maya:
   stage: build
   before_script:
    - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    - curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    - sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=v1.9.4 --extra-config=apiserver.Authorization.Mode=RBAC
    - minikube update-context
    - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
    - ./ci/ubuntu-compile-nsenter.sh && sudo cp .tmp/util-linux-2.30.2/nsenter /usr/bin
    - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
    - chmod 700 get_helm.sh
    - ./get_helm.sh
    - helm init
   script: 
    - kubectl cluster-info
    - kubectl get deployment
    - ./buildscripts/travis-build.sh
    - ./ci/travis-ci.sh


#build-maya:
#  stage: build
#  script:
#    - cd $CURRENT_BUILD_PATH
#    - go build

#test-my-project:
#  stage: test
#  script:
#    - cd $CURRENT_BUILD_PATH
#    - go test
